import argparse
def argument():
    parser = argparse.ArgumentParser(description = '''
    Performs a check on time, rejecting some float profiles.
    Generates a Float_Index.txt file, actually used by all the scripts (by means of Float_Selector() method.
    Prints something on stdout, useful to communicate with LOV team.
    ''', formatter_class=argparse.RawTextHelpFormatter)


    parser.add_argument(   '--inputfile',"-i",
                                type = str,
                                required = False,
                                default = "/gss/gss_work/DRES_OGS_BiGe/Observations/TIME_RAW_DATA/ONLINE/FLOAT_LOVBIO/Float_Index.0.txt",
                                help = 'file generated by dump_index.py')
    parser.add_argument(   '--outfile',"-o",
                                type = str,
                                required = False,
                                default = "/gss/gss_work/DRES_OGS_BiGe/Observations/TIME_RAW_DATA/ONLINE/FLOAT_LOVBIO/Float_Index.txt",
                                help = 'file used by Float_Selector')
    parser.add_argument(   '--erase',"-e",
                                dest = 'erase',
                                default = False,
                                action = 'store_true',
                                help = 'deletes original files')
    return parser.parse_args()

args = argument()


import datetime
import numpy as np
import os
from bitsea.commons.utils import addsep
isLOV = False
float_dataset=os.path.basename(os.path.dirname(args.inputfile))
if float_dataset=="SUPERFLOAT":
    from bitsea.instruments import superfloat as lovbio_float
if float_dataset == "FLOAT_LOVBIO":
    isLOV = True
    from bitsea.instruments import lovbio_float
if float_dataset in ["CORIOLIS", "FLOAT_BIO"]:
    from bitsea.instruments import bio_float as lovbio_float




INDEX_FILE=np.loadtxt(args.inputfile,dtype=lovbio_float.mydtype, delimiter=",",ndmin=1)
nFiles=INDEX_FILE.size

if isLOV:
    ii=INDEX_FILE['file_name']=="6901770/output_lovbio090d_000_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = 27.908068 
    INDEX_FILE['lat'][ind] = 35.666267 
    ii=INDEX_FILE['file_name']=="6901769/output_lovbio089d_000_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = 10.838378
    INDEX_FILE['lat'][ind] = 39.218622
    ii=INDEX_FILE['file_name']=="6900807/output_gembio001b_000_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = 31.297680 
    INDEX_FILE['lat'][ind] = 43.496967 

    ii=INDEX_FILE['file_name']=="6901511/output_lovbio035b_038_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = 5.641963 
    INDEX_FILE['lat'][ind] = 41.236117

    ii=INDEX_FILE['file_name']=="6901861/output_ogsbio001b_000_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = -0.769862 
    INDEX_FILE['lat'][ind] = 36.9156337#
    ii=INDEX_FILE['file_name']=="6901766/output_lovbio085d_176_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = 26.094515 
    INDEX_FILE['lat'][ind] = 32.091758

    ii=INDEX_FILE['file_name']=="6901766/output_lovbio085d_185_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = 27.132267
    INDEX_FILE['lat'][ind] = 31.605190
    INDEX_FILE['time'][ind] = "20171224-09:31:00"

    ii=INDEX_FILE['file_name']=="6901766/output_lovbio085d_186_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = 27.163835
    INDEX_FILE['lat'][ind] = 31.694962
    INDEX_FILE['time'][ind] = "20171231-09:34:00"


    ii=INDEX_FILE['file_name']=="6901773/output_lovbio093d_169_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = 32.105873 
    INDEX_FILE['lat'][ind] = 33.438398

    ii=INDEX_FILE['file_name']=="6901860/output_ogsbio005b_000_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = 19.77989 
    INDEX_FILE['lat'][ind] = 38.695477

    ii=INDEX_FILE['file_name']=="6901862/output_ogsbio003b_245_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = 17.341422 
    INDEX_FILE['lat'][ind] = 39.368507

    ii=INDEX_FILE['file_name']=="6901864/output_ogsbio002b_180_00.nc"
    ind = np.nonzero(ii)[0][0]
    INDEX_FILE['lon'][ind] = 4.978265 
    INDEX_FILE['lat'][ind] = 40.277298


    # il 7900592 ha ogni tanto 41.887277,36.533803 e ogni tanto -41.880218,-36.541308
#     for iFrame, f in enumerate(INDEX_FILE['file_name']): 
#         if f.startswith("7900592/"):
#             if INDEX_FILE['lon'][iFrame]< 0 :
#                 INDEX_FILE['lon'][iFrame] = -INDEX_FILE['lon'][iFrame]
#             if INDEX_FILE['lat'][iFrame]< 0 :
#                 INDEX_FILE['lat'][iFrame] = -INDEX_FILE['lat'][iFrame]
            
    
    REMOVING_LIST = []
    REMOVING_LIST.append("6901772/output_lovbio092e_000_00.nc") #non mi fido di time, lat,lon
    REMOVING_LIST.append("6902900/output_lovbio091e_000_00.nc")
    
    good=np.ones((nFiles,),bool)
    for f in REMOVING_LIST:
        ii=INDEX_FILE['file_name']=="6901772/output_lovbio092e_000_00.nc"
        good[ii]=False
    INDEX_FILE=INDEX_FILE[good]

GSS_DEFAULT_LOC = "/gss/gss_work/DRES_OGS_BiGe/Observations/TIME_RAW_DATA/ONLINE/"
ONLINE_REPO = addsep(os.getenv("ONLINE_REPO",GSS_DEFAULT_LOC))
FloatIndexer=addsep(ONLINE_REPO) + float_dataset + "/Float_Index.txt"
#is_default_V4C= ONLINE_REPO == GSS_DEFAULT_LOC

nFiles=INDEX_FILE.size
PROFILE_LIST = []
for iFile in range(nFiles):
    timestr          = INDEX_FILE['time'][iFile]
    lon              = INDEX_FILE['lon' ][iFile]
    lat              = INDEX_FILE['lat' ][iFile]
    filename         = INDEX_FILE['file_name'][iFile]
    available_params = INDEX_FILE['parameters'][iFile]
    float_time = datetime.datetime.strptime(timestr,'%Y%m%d-%H:%M:%S')
    parameterdatamode= INDEX_FILE['parameter_data_mode'][iFile]
    

    filename = ONLINE_REPO + float_dataset + "/" + filename
    thefloat = lovbio_float.BioFloat(lon,lat,float_time,filename,available_params,parameterdatamode)
    PROFILE_LIST.append(lovbio_float.BioFloatProfile(float_time,lon,lat, thefloat,available_params))
    


REMOVING_LIST=[]
WMOS=lovbio_float.get_wmo_list(PROFILE_LIST)


for wmo in WMOS:
    Profile_list = lovbio_float.filter_by_wmo(PROFILE_LIST, wmo)
    #first=Profile_list[0]
    #d=datetime.datetime(firsrt.time)
    for ntry in range(10):
        TIMELIST=[p.time for p in Profile_list]
        nProfiles = len(Profile_list)
        for ip in range(1,nProfiles):
            if TIMELIST[ip] <= TIMELIST[ip-1]:
                print("\nPROBLEM in ", wmo, ip)
                REMOVING_LIST.append(Profile_list[ip]._my_float.filename)
                Profile_list.remove(Profile_list[ip])
                nProfiles = len(Profile_list)
                for k in range(-1,2):
                    IP = ip+k
                    if IP > nProfiles-1 : continue
                    print(IP, Profile_list[IP]._my_float.filename, TIMELIST[IP])
                break


good = np.ones((nFiles),bool)
LINES=[]
for iFile in range(nFiles):
    if ONLINE_REPO + float_dataset + "/"+ INDEX_FILE['file_name'][iFile] in REMOVING_LIST:
        good[iFile]=False


mydtype= np.dtype([
          ('file_name','U200'),
          ('lat',np.float32),
          ('lon',np.float32),
          ('time','U17'),
          ('parameters','U200'),
          ('parameter_data_mode','U100')] )

nOut = good.sum()
OUT = np.zeros((nOut,), dtype=mydtype)
OUT[:] = INDEX_FILE[good]
np.savetxt(args.outfile, OUT, fmt="%s,%f,%f,%s,%s,%s")


if args.erase:
    for filename in REMOVING_LIST:
        command = "rm -f  " + filename
        print(command)
        os.system(command)


    
